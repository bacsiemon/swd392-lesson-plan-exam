// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using LessonPlanExam.Repositories.Models;
using LessonPlanExam.Repositories.Enums;
using Microsoft.EntityFrameworkCore;

namespace LessonPlanExam.Repositories.Context;

public partial class LessonPlanExamDbContext : DbContext
{
    public LessonPlanExamDbContext(DbContextOptions<LessonPlanExamDbContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Account> Accounts { get; set; }

    public virtual DbSet<Admin> Admins { get; set; }

    public virtual DbSet<Exam> Exams { get; set; }

    public virtual DbSet<ExamAttempt> ExamAttempts { get; set; }

    public virtual DbSet<ExamAttemptAnswer> ExamAttemptAnswers { get; set; }

    public virtual DbSet<ExamMatrix> ExamMatrices { get; set; }

    public virtual DbSet<ExamMatrixItem> ExamMatrixItems { get; set; }

    public virtual DbSet<ExamQuestion> ExamQuestions { get; set; }

    public virtual DbSet<FileUpload> FileUploads { get; set; }

    public virtual DbSet<LessonPlan> LessonPlans { get; set; }

    public virtual DbSet<Question> Questions { get; set; }

    public virtual DbSet<QuestionBank> QuestionBanks { get; set; }

    public virtual DbSet<QuestionDifficulty> QuestionDifficulties { get; set; }

    public virtual DbSet<QuestionFillBlankAnswer> QuestionFillBlankAnswers { get; set; }

    public virtual DbSet<QuestionMultipleChoiceAnswer> QuestionMultipleChoiceAnswers { get; set; }

    public virtual DbSet<SlotMaterial> SlotMaterials { get; set; }

    public virtual DbSet<SlotPlan> SlotPlans { get; set; }

    public virtual DbSet<Student> Students { get; set; }

    public virtual DbSet<Teacher> Teachers { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Account>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("accounts_pkey");

            entity.ToTable("accounts");

            entity.HasIndex(e => e.Email, "accounts_email_key").IsUnique();

            entity.HasIndex(e => e.NormalizedEmail, "accounts_normalized_email_key").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AvatarUrl).HasColumnName("avatar_url");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnName("created_at");
            entity.Property(e => e.DateOfBirth).HasColumnName("date_of_birth");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("email");
            entity.Property(e => e.EmailVerified)
                .HasDefaultValue(false)
                .HasColumnName("email_verified");
            entity.Property(e => e.FullName)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("full_name");
            entity.Property(e => e.IsActive)
                .HasDefaultValue(true)
                .HasColumnName("is_active");
            entity.Property(e => e.NormalizedEmail)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("normalized_email");
            entity.Property(e => e.PasswordHash)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("password_hash");
            entity.Property(e => e.Phone)
                .HasMaxLength(20)
                .HasColumnName("phone");
            entity.Property(e => e.RoleEnum)
                .HasColumnName("role_enum");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnName("updated_at");
        });

        modelBuilder.Entity<Admin>(entity =>
        {
            entity.HasKey(e => e.AccountId).HasName("admins_pkey");

            entity.ToTable("admins");

            entity.Property(e => e.AccountId)
                .ValueGeneratedNever()
                .HasColumnName("account_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnName("created_at");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnName("updated_at");

            entity.HasOne(d => d.Account).WithOne(p => p.Admin)
                .HasForeignKey<Admin>(d => d.AccountId)
                .HasConstraintName("admins_account_id_fkey");
        });

        modelBuilder.Entity<Exam>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("exams_pkey");

            entity.ToTable("exams");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedByTeacher).HasColumnName("created_by_teacher");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.DurationMinutes)
                .HasDefaultValue(60)
                .HasColumnName("duration_minutes");
            entity.Property(e => e.EndTime).HasColumnName("end_time");
            entity.Property(e => e.ExamMatrixId).HasColumnName("exam_matrix_id");
            entity.Property(e => e.GradeLevel).HasColumnName("grade_level");
            entity.Property(e => e.MaxAttempts)
                .HasDefaultValue(1)
                .HasColumnName("max_attempts");
            entity.Property(e => e.PassThreshold)
                .HasPrecision(5, 2)
                .HasDefaultValueSql("0")
                .HasColumnName("pass_threshold");
            entity.Property(e => e.PasswordHash)
                .HasMaxLength(255)
                .HasColumnName("password_hash");
            entity.Property(e => e.RandomizeAnswers)
                .HasDefaultValue(false)
                .HasColumnName("randomize_answers");
            entity.Property(e => e.RandomizeQuestions)
                .HasDefaultValue(false)
                .HasColumnName("randomize_questions");
            entity.Property(e => e.ScoringMethodEnum)
                .HasDefaultValue(EScoringMethod.Latest)
                .HasColumnName("scoring_method_enum");
            entity.Property(e => e.ShowCorrectAnswers)
                .HasDefaultValue(false)
                .HasColumnName("show_correct_answers");
            entity.Property(e => e.ShowResultsImmediately)
                .HasDefaultValue(false)
                .HasColumnName("show_results_immediately");
            entity.Property(e => e.StartTime).HasColumnName("start_time");
            entity.Property(e => e.StatusEnum)
                .HasDefaultValue(EExamStatus.Inactive)
                .HasColumnName("status_enum");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("title");
            entity.Property(e => e.TotalPoints)
                .HasPrecision(5, 2)
                .HasDefaultValueSql("0")
                .HasColumnName("total_points");
            entity.Property(e => e.TotalQuestions)
                .HasDefaultValue(0)
                .HasColumnName("total_questions");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnName("updated_at");

            entity.HasOne(d => d.CreatedByTeacherNavigation).WithMany(p => p.Exams)
                .HasForeignKey(d => d.CreatedByTeacher)
                .HasConstraintName("exams_created_by_teacher_fkey");

            entity.HasOne(d => d.ExamMatrix).WithMany(p => p.Exams)
                .HasForeignKey(d => d.ExamMatrixId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("exams_exam_matrix_id_fkey");
        });

        modelBuilder.Entity<ExamAttempt>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("exam_attempts_pkey");

            entity.ToTable("exam_attempts");

            entity.HasIndex(e => new { e.ExamId, e.StudentId, e.AttemptNumber }, "exam_attempts_exam_id_student_id_attempt_number_key").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AttemptNumber)
                .HasDefaultValue(1)
                .HasColumnName("attempt_number");
            entity.Property(e => e.AutoGradedAt).HasColumnName("auto_graded_at");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnName("created_at");
            entity.Property(e => e.ExamId).HasColumnName("exam_id");
            entity.Property(e => e.Feedback).HasColumnName("feedback");
            entity.Property(e => e.GradedBy).HasColumnName("graded_by");
            entity.Property(e => e.ManualGradedAt).HasColumnName("manual_graded_at");
            entity.Property(e => e.MaxScore)
                .HasPrecision(5, 2)
                .HasDefaultValueSql("0")
                .HasColumnName("max_score");
            entity.Property(e => e.ScorePercentage)
                .HasPrecision(5, 2)
                .HasDefaultValueSql("0")
                .HasColumnName("score_percentage");
            entity.Property(e => e.StartedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnName("started_at");
            entity.Property(e => e.StatusEnum)
                .HasDefaultValue(EAttemptStatus.InProgress)
                .HasColumnName("status_enum");
            entity.Property(e => e.StudentId).HasColumnName("student_id");
            entity.Property(e => e.SubmittedAt).HasColumnName("submitted_at");
            entity.Property(e => e.TimeSpentSeconds)
                .HasDefaultValue(0)
                .HasColumnName("time_spent_seconds");
            entity.Property(e => e.TotalScore)
                .HasPrecision(5, 2)
                .HasDefaultValueSql("0")
                .HasColumnName("total_score");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnName("updated_at");

            entity.HasOne(d => d.Exam).WithMany(p => p.ExamAttempts)
                .HasForeignKey(d => d.ExamId)
                .HasConstraintName("exam_attempts_exam_id_fkey");

            entity.HasOne(d => d.GradedByNavigation).WithMany(p => p.ExamAttempts)
                .HasForeignKey(d => d.GradedBy)
                .HasConstraintName("exam_attempts_graded_by_fkey");

            entity.HasOne(d => d.Student).WithMany(p => p.ExamAttempts)
                .HasForeignKey(d => d.StudentId)
                .HasConstraintName("exam_attempts_student_id_fkey");
        });

        modelBuilder.Entity<ExamAttemptAnswer>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("exam_attempt_answers_pkey");

            entity.ToTable("exam_attempt_answers");

            entity.HasIndex(e => new { e.ExamAttemptId, e.QuestionId }, "exam_attempt_answers_exam_attempt_id_question_id_key").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AnswerData)
                .HasDefaultValueSql("'{}'::jsonb")
                .HasColumnType("jsonb")
                .HasColumnName("answer_data");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnName("created_at");
            entity.Property(e => e.ExamAttemptId).HasColumnName("exam_attempt_id");
            entity.Property(e => e.IsCorrect).HasColumnName("is_correct");
            entity.Property(e => e.PointsEarned)
                .HasPrecision(5, 2)
                .HasDefaultValueSql("0")
                .HasColumnName("points_earned");
            entity.Property(e => e.PointsPossible)
                .HasPrecision(5, 2)
                .HasDefaultValueSql("0")
                .HasColumnName("points_possible");
            entity.Property(e => e.QuestionId).HasColumnName("question_id");
            entity.Property(e => e.SelectedAnswerIds).HasColumnName("selected_answer_ids");
            entity.Property(e => e.TextAnswer).HasColumnName("text_answer");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnName("updated_at");

            entity.HasOne(d => d.ExamAttempt).WithMany(p => p.ExamAttemptAnswers)
                .HasForeignKey(d => d.ExamAttemptId)
                .HasConstraintName("exam_attempt_answers_exam_attempt_id_fkey");

            entity.HasOne(d => d.Question).WithMany(p => p.ExamAttemptAnswers)
                .HasForeignKey(d => d.QuestionId)
                .HasConstraintName("exam_attempt_answers_question_id_fkey");
        });

        modelBuilder.Entity<ExamMatrix>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("exam_matrices_pkey");

            entity.ToTable("exam_matrices");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Configuration)
                .HasDefaultValueSql("'{}'::jsonb")
                .HasColumnType("jsonb")
                .HasColumnName("configuration");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnName("created_at");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("name");
            entity.Property(e => e.TeacherId).HasColumnName("teacher_id");
            entity.Property(e => e.TotalPoints)
                .HasPrecision(5, 2)
                .HasDefaultValueSql("0")
                .HasColumnName("total_points");
            entity.Property(e => e.TotalQuestions)
                .HasDefaultValue(0)
                .HasColumnName("total_questions");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnName("updated_at");

            entity.HasOne(d => d.Teacher).WithMany(p => p.ExamMatrices)
                .HasForeignKey(d => d.TeacherId)
                .HasConstraintName("exam_matrices_teacher_id_fkey");
        });

        modelBuilder.Entity<ExamMatrixItem>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("exam_matrix_items_pkey");

            entity.ToTable("exam_matrix_items");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnName("created_at");
            entity.Property(e => e.DifficultyLevel).HasColumnName("difficulty_level");
            entity.Property(e => e.Domain)
                .HasMaxLength(100)
                .HasColumnName("domain");
            entity.Property(e => e.ExamMatrixId).HasColumnName("exam_matrix_id");
            entity.Property(e => e.PointsPerQuestion)
                .HasPrecision(5, 2)
                .HasDefaultValueSql("1.0")
                .HasColumnName("points_per_question");
            entity.Property(e => e.QuestionBankId).HasColumnName("question_bank_id");
            entity.Property(e => e.QuestionCount)
                .HasDefaultValue(1)
                .HasColumnName("question_count");

            entity.HasOne(d => d.ExamMatrix).WithMany(p => p.ExamMatrixItems)
                .HasForeignKey(d => d.ExamMatrixId)
                .HasConstraintName("exam_matrix_items_exam_matrix_id_fkey");

            entity.HasOne(d => d.QuestionBank).WithMany(p => p.ExamMatrixItems)
                .HasForeignKey(d => d.QuestionBankId)
                .HasConstraintName("exam_matrix_items_question_bank_id_fkey");
        });

        modelBuilder.Entity<ExamQuestion>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("exam_questions_pkey");

            entity.ToTable("exam_questions");

            entity.HasIndex(e => new { e.ExamId, e.OrderIndex }, "exam_questions_exam_id_order_index_key").IsUnique();

            entity.HasIndex(e => new { e.ExamId, e.QuestionId }, "exam_questions_exam_id_question_id_key").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnName("created_at");
            entity.Property(e => e.ExamId).HasColumnName("exam_id");
            entity.Property(e => e.OrderIndex).HasColumnName("order_index");
            entity.Property(e => e.Points)
                .HasPrecision(5, 2)
                .HasDefaultValueSql("1.0")
                .HasColumnName("points");
            entity.Property(e => e.QuestionId).HasColumnName("question_id");

            entity.HasOne(d => d.Exam).WithMany(p => p.ExamQuestions)
                .HasForeignKey(d => d.ExamId)
                .HasConstraintName("exam_questions_exam_id_fkey");

            entity.HasOne(d => d.Question).WithMany(p => p.ExamQuestions)
                .HasForeignKey(d => d.QuestionId)
                .HasConstraintName("exam_questions_question_id_fkey");
        });

        modelBuilder.Entity<FileUpload>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("file_uploads_pkey");

            entity.ToTable("file_uploads");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Data)
                .IsRequired()
                .HasColumnName("data");
            entity.Property(e => e.FileName)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("file_name");
            entity.Property(e => e.MimeType)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("mime_type");
            entity.Property(e => e.UploadedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnName("uploaded_at");
        });

        modelBuilder.Entity<LessonPlan>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("lesson_plans_pkey");

            entity.ToTable("lesson_plans");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedByTeacher).HasColumnName("created_by_teacher");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.GradeLevel).HasColumnName("grade_level");
            entity.Property(e => e.ImageUrl).HasColumnName("image_url");
            entity.Property(e => e.Objectives).HasColumnName("objectives");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("title");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnName("updated_at");

            entity.HasOne(d => d.CreatedByTeacherNavigation).WithMany(p => p.LessonPlans)
                .HasForeignKey(d => d.CreatedByTeacher)
                .HasConstraintName("lesson_plans_created_by_teacher_fkey");
        });

        modelBuilder.Entity<Question>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("questions_pkey");

            entity.ToTable("questions");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AdditionalData)
                .HasDefaultValueSql("'{}'::jsonb")
                .HasColumnType("jsonb")
                .HasColumnName("additional_data");
            entity.Property(e => e.Content)
                .IsRequired()
                .HasColumnName("content");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnName("created_at");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.IsActive)
                .HasDefaultValue(true)
                .HasColumnName("is_active");
            entity.Property(e => e.QuestionBankId).HasColumnName("question_bank_id");
            entity.Property(e => e.QuestionDifficultyId).HasColumnName("question_difficulty_id");
            entity.Property(e => e.QuestionTypeEnum)
                .HasColumnName("question_type_enum");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(500)
                .HasColumnName("title");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnName("updated_at");

            entity.HasOne(d => d.QuestionBank).WithMany(p => p.Questions)
                .HasForeignKey(d => d.QuestionBankId)
                .HasConstraintName("questions_question_bank_id_fkey");

            entity.HasOne(d => d.QuestionDifficulty).WithMany(p => p.Questions)
                .HasForeignKey(d => d.QuestionDifficultyId)
                .HasConstraintName("questions_question_difficulty_id_fkey");
        });

        modelBuilder.Entity<QuestionBank>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("question_banks_pkey");

            entity.ToTable("question_banks");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnName("created_at");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.GradeLevel).HasColumnName("grade_level");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("name");
            entity.Property(e => e.StatusEnum)
                .HasDefaultValue(EQuestionBankStatus.Draft)
                .HasColumnName("status_enum");
            entity.Property(e => e.TeacherId).HasColumnName("teacher_id");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnName("updated_at");

            entity.HasOne(d => d.Teacher).WithMany(p => p.QuestionBanks)
                .HasForeignKey(d => d.TeacherId)
                .HasConstraintName("question_banks_teacher_id_fkey");
        });

        modelBuilder.Entity<QuestionDifficulty>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("question_difficulties_pkey");

            entity.ToTable("question_difficulties");

            entity.HasIndex(e => e.DifficultyLevel, "question_difficulties_difficulty_level_key").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.DifficultyLevel).HasColumnName("difficulty_level");
            entity.Property(e => e.Domain)
                .HasMaxLength(100)
                .HasColumnName("domain");
        });

        modelBuilder.Entity<QuestionFillBlankAnswer>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("question_fill_blank_answers_pkey");

            entity.ToTable("question_fill_blank_answers");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CorrectAnswer)
                .IsRequired()
                .HasColumnName("correct_answer");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnName("created_at");
            entity.Property(e => e.Explanation).HasColumnName("explanation");
            entity.Property(e => e.NormalizedCorrectAnswer)
                .IsRequired()
                .HasColumnName("normalized_correct_answer");
            entity.Property(e => e.QuestionId).HasColumnName("question_id");

            entity.HasOne(d => d.Question).WithMany(p => p.QuestionFillBlankAnswers)
                .HasForeignKey(d => d.QuestionId)
                .HasConstraintName("question_fill_blank_answers_question_id_fkey");
        });

        modelBuilder.Entity<QuestionMultipleChoiceAnswer>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("question_multiple_choice_answers_pkey");

            entity.ToTable("question_multiple_choice_answers");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AnswerText)
                .IsRequired()
                .HasColumnName("answer_text");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnName("created_at");
            entity.Property(e => e.Explanation).HasColumnName("explanation");
            entity.Property(e => e.IsCorrect)
                .HasDefaultValue(false)
                .HasColumnName("is_correct");
            entity.Property(e => e.OrderIndex)
                .HasDefaultValue(0)
                .HasColumnName("order_index");
            entity.Property(e => e.QuestionId).HasColumnName("question_id");

            entity.HasOne(d => d.Question).WithMany(p => p.QuestionMultipleChoiceAnswers)
                .HasForeignKey(d => d.QuestionId)
                .HasConstraintName("question_multiple_choice_answers_question_id_fkey");
        });

        modelBuilder.Entity<SlotMaterial>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("slot_materials_pkey");

            entity.ToTable("slot_materials");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnName("created_at");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.SlotPlanId).HasColumnName("slot_plan_id");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("title");
            entity.Property(e => e.Url).HasColumnName("url");

            entity.HasOne(d => d.SlotPlan).WithMany(p => p.SlotMaterials)
                .HasForeignKey(d => d.SlotPlanId)
                .HasConstraintName("slot_materials_slot_plan_id_fkey");
        });

        modelBuilder.Entity<SlotPlan>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("slot_plans_pkey");

            entity.ToTable("slot_plans");

            entity.HasIndex(e => new { e.LessonPlanId, e.SlotNumber }, "slot_plans_lesson_plan_id_slot_number_key").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Content)
                .IsRequired()
                .HasColumnName("content");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnName("created_at");
            entity.Property(e => e.DurationMinutes)
                .HasDefaultValue(45)
                .HasColumnName("duration_minutes");
            entity.Property(e => e.LessonPlanId).HasColumnName("lesson_plan_id");
            entity.Property(e => e.SlotNumber).HasColumnName("slot_number");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("title");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnName("updated_at");

            entity.HasOne(d => d.LessonPlan).WithMany(p => p.SlotPlans)
                .HasForeignKey(d => d.LessonPlanId)
                .HasConstraintName("slot_plans_lesson_plan_id_fkey");
        });

        modelBuilder.Entity<Student>(entity =>
        {
            entity.HasKey(e => e.AccountId).HasName("students_pkey");

            entity.ToTable("students");

            entity.Property(e => e.AccountId)
                .ValueGeneratedNever()
                .HasColumnName("account_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnName("created_at");
            entity.Property(e => e.IsActive)
                .HasDefaultValue(true)
                .HasColumnName("is_active");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnName("updated_at");

            entity.HasOne(d => d.Account).WithOne(p => p.Student)
                .HasForeignKey<Student>(d => d.AccountId)
                .HasConstraintName("students_account_id_fkey");
        });

        modelBuilder.Entity<Teacher>(entity =>
        {
            entity.HasKey(e => e.AccountId).HasName("teachers_pkey");

            entity.ToTable("teachers");

            entity.Property(e => e.AccountId)
                .ValueGeneratedNever()
                .HasColumnName("account_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnName("created_at");
            entity.Property(e => e.IsActive)
                .HasDefaultValue(true)
                .HasColumnName("is_active");
            entity.Property(e => e.SchoolName)
                .HasMaxLength(100)
                .HasColumnName("school_name");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnName("updated_at");

            entity.HasOne(d => d.Account).WithOne(p => p.Teacher)
                .HasForeignKey<Teacher>(d => d.AccountId)
                .HasConstraintName("teachers_account_id_fkey");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}